{"version":3,"sources":["index.js"],"names":["window","addEventListener","suites","values","deckArr","isDeckBuilt","buildBtn","document","querySelector","shuffleBtn","cutBtn","dealBtn","randomDealBtn","bjBtn","cardDisplay","dealDisplay","Deck","build","i","cardSuite","x","card","cardValue","value","suite","img","unshift","innerHTML","shuffle","array","m","length","t","Math","floor","random","displayName","item","deckDisplayName","join","imgURL","display","cardNameDisplay","map","cut","arr","cut1","slice","cut2","cut1Display","cut2Display","deal","firstCard","shift","firstCardName","dealRandom","randCard","randCardLocation","indexOf","splice","randCardDisplay","event","preventDefault","newFunction","console","log"],"mappings":"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","file":"deck-of-cards.e31bb0bc.js","sourceRoot":"..","sourcesContent":["window.addEventListener('load', function() {\n\n    // create card object\n\n    var suites = ['hearts', 'diamonds', 'spades', 'clubs'];\n    var values = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K',];\n    var deckArr = [];\n    var isDeckBuilt = false;\n\n    //buttons\n    let buildBtn = document.querySelector('.build-button');\n    let shuffleBtn = document.querySelector('.shuffle-button');\n    let cutBtn = document.querySelector('.cut-button');\n    let dealBtn = document.querySelector('.deal-button');\n    let randomDealBtn = document.querySelector('.random-deal-button');\n    let bjBtn = document.querySelector('bj-button')\n\n    //deck display\n    var cardDisplay = document.querySelector('.card-display');\n    var dealDisplay = document.querySelector('.delt-cards');\n\n    //create deck by looping 52 times and return results to deck array\n    var Deck = {\n        \n        build: function() {\n            //check to see if the deck is already built.  if it is, don't build again\n            if(!isDeckBuilt) {\n                //start with an empty deck\n                deckArr = [];\n                for (var i = 0 ; i < 4 ; i++) {\n                    let cardSuite = suites[i];\n                    \n                    for (var x = 0 ; x < 13 ; x++ ) {\n                        let card = {};\n                        let cardValue = values[x];\n                        card.value = cardValue;\n                        card.suite = cardSuite;\n                        card.img   = `${cardValue}-${cardSuite}`;\n                        deckArr.unshift(card);\n                    };\n                };\n            }\n            //limit the ability of the user to deal a second deck to the array\n            isDeckBuilt = true;\n            //clear the dealt cards field\n            dealDisplay.innerHTML = '';\n            return deckArr;\n        },\n\n        shuffle: function (array) {\n            var m = array.length, t, i;\n        \n            // While there remain elements to shuffle…\n            while (m) {\n        \n            // Pick a remaining element…\n            i = Math.floor(Math.random() * m--);\n        \n            // And swap it with the current element.\n            t = array[m];\n            array[m] = array[i];\n            array[i] = t;\n            }\n            \n            return array;\n        },\n\n        //pull the value and the name out of the card object\n        displayName: function(item) {\n            var deckDisplayName = [item.value, item.suite,].join(' of ');\n            var imgURL = `images/${item.img}.png`;\n\n            return `\n            <div class=\"card-block\">\n            <img src=\"${imgURL}\" />\n            <span>${deckDisplayName}</span>\n            </div>\n            `\n            ;\n        },\n\n        //loop through the above displayname to get all the card values\n        display: function() {\n            cardNameDisplay = deckArr.map(Deck.displayName);\n            cardDisplay.innerHTML = deckArr.map(Deck.displayName).join('');\n        },\n\n        //cut the deck in half display two arrays\n        cut: function(arr) {\n            let cut1 = arr.slice(0, 26);\n            let cut2 = arr.slice(27, 51);\n            let cut1Display = cut1.map(Deck.displayName);\n            let cut2Display = cut2.map(Deck.displayName);\n\n            cardDisplay.innerHTML = `<strong>Cut 1</strong><br>${cut1Display}<br><br>\n                <strong>Cut 2<br></strong>${cut2Display}`;\n        \n        },\n\n        deal: function(arr) {\n            //take the first item in the card array, remove it, and display it\n            var firstCard = arr.shift();\n            var firstCardName = Deck.displayName(firstCard);\n            dealDisplay.innerHTML = `<br><br>Delt card:<br>${firstCardName}`;\n\n        },\n\n        dealRandom: function(arr) {\n            //find a random card in the deck and display it\n            var randCard = arr[Math.floor(Math.random()*arr.length)];\n            var randCardLocation = arr.indexOf(randCard);\n            arr.splice(randCardLocation, 1);\n            var randCardDisplay = Deck.displayName(randCard);\n            dealDisplay.innerHTML = `<br><br>Randomly delt card:<br>${randCardDisplay}`;\n\n        }\n\n        \n    }\n\n    if (buildBtn) {\n    buildBtn.addEventListener('click', function(event) {\n        event.preventDefault();\n        Deck.build();\n        Deck.display();\n    });\n    }\n\n    if (shuffleBtn) {\n        shuffleBtn.addEventListener('click', function(event) {\n            event.preventDefault();\n            Deck.build();\n            Deck.shuffle(deckArr);\n            Deck.display();\n            //give ability to build a new deck that is not shuffled\n            isDeckBuilt = false;\n        });\n    }\n\n    if (cutBtn) {\n        cutBtn.addEventListener('click', function(event) {\n            event.preventDefault();\n            Deck.cut(deckArr);\n            //give ability to create a fresh deck\n            isDeckBuilt = false;\n        });\n    }\n\n    if (dealBtn) {\n        dealBtn.addEventListener('click', function(event) {\n            event.preventDefault();\n            Deck.deal(deckArr);\n            Deck.display(deckArr);\n            //give ability to create a fresh deck\n            isDeckBuilt = false;\n        });\n    }\n\n    if (randomDealBtn) {\n        randomDealBtn.addEventListener('click', function(event){\n            event.preventDefault();\n            Deck.dealRandom(deckArr);\n            Deck.display(deckArr);\n\n        });\n    }\n\n\n    function newFunction() {\n        console.log(buildBtn);\n    }\n\n});"]}