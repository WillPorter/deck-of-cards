{"version":3,"sources":["bj.js"],"names":["window","addEventListener","suites","values","score","deckArr","isDeckBuilt","dealerScore","playerScore","bothScores","dealBtn","document","querySelector","hitBtn","stayBtn","dealersFirst","dealersSecond","playersFirst","playersSecond","dealersHit","playersHit","message","Deck","build","i","cardSuite","x","card","cardValue","cardScore","value","suite","img","unshift","shuffle","array","m","length","t","Math","floor","random","displayName","item","deckDisplayName","join","imgURL","display","cardNameDisplay","map","cardDisplay","innerHTML","cut","arr","cut1","slice","cut2","cut1Display","cut2Display","dealBJ","nextCard","shift","nextCardName","hitBJ","stayBJ","scoreCheck","clearTable","event","preventDefault"],"mappings":"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","file":"bj.60f5bbcf.js","sourceRoot":"..","sourcesContent":["// #### TODO\n// ability to have an Ace score either 11 or 1.  as of now they are only 11.\n// lock down the buttons after the game is over except for the deal blackjack button\n// add max number of cards delt \n\nwindow.addEventListener('load', function() {\n\n    // create card object\n\n    var suites = ['hearts', 'diamonds', 'spades', 'clubs'];\n    var values = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K',];\n    var score = [11, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10];\n    var deckArr = [];\n    var isDeckBuilt = false;\n    var dealerScore = 0;\n    var playerScore = 0;\n    var bothScores = {};\n\n    //buttons\n    let dealBtn = document.querySelector('.deal-button');\n    let hitBtn = document.querySelector('.hit-button');\n    let stayBtn = document.querySelector('.stay-button');\n\n    //deck display\n    var dealersFirst = document.querySelector('.dealers-first');\n    var dealersSecond = document.querySelector('.dealers-second');\n    var playersFirst = document.querySelector('.players-first');\n    var playersSecond = document.querySelector('.players-second');\n    var dealersHit = document.querySelector('.dealers-hit');\n    var playersHit = document.querySelector('.players-hit');\n    var message = document.querySelector('.message');\n\n\n    var Deck = {\n        //create deck by looping 52 times and return results to deck array\n        // build the deck.  sets and array of objects into deckArr\n        build: function() {\n            //check to see if the deck is already built.  if it is, don't build again\n            if(!isDeckBuilt) {\n                //start with an empty deck\n                deckArr = [];\n                for (var i = 0 ; i < 4 ; i++) {\n                    let cardSuite = suites[i];\n                    \n                    for (var x = 0 ; x < 13 ; x++ ) {\n                        //build the card object and add it to the deckArr array variable\n                        let card = {};\n                        let cardValue = values[x];\n                        let cardScore = score[x];\n                        card.value = cardValue;\n                        card.suite = cardSuite;\n                        card.score = cardScore;\n                        //card.img is for the file-path of the image\n                        card.img   = `${cardValue}-${cardSuite}`;\n                        deckArr.unshift(card);\n                    };\n                };\n            }\n            //limit the ability of the user to deal a second deck to the array\n            isDeckBuilt = true;\n\n            return deckArr;\n        },\n\n        shuffle: function (array) {\n            var m = array.length, t, i;\n        \n            // While there remain elements to shuffle…\n            while (m) {\n        \n            // Pick a remaining element…\n            i = Math.floor(Math.random() * m--);\n        \n            // And swap it with the current element.\n            t = array[m];\n            array[m] = array[i];\n            array[i] = t;\n            }\n            \n            return array;\n        },\n\n        //pull the value and the name out of the card object\n        displayName: function(item) {\n            var deckDisplayName = [item.value, item.suite,].join(' of ');\n            var imgURL = `images/${item.img}.png`;\n\n            return `\n            <div class=\"card-block\">\n            <img src=\"${imgURL}\" />\n            <span>${deckDisplayName}</span>\n            </div>\n            `\n            ;\n        },\n\n        //loop through the above displayname to get all the card values\n        display: function() {\n            cardNameDisplay = deckArr.map(Deck.displayName);\n            cardDisplay.innerHTML = deckArr.map(Deck.displayName).join('');\n        },\n\n        //cut the deck in half display two arrays\n        cut: function(arr) {\n            let cut1 = arr.slice(0, 25);\n            let cut2 = arr.slice(26, 51);\n            let cut1Display = cut1.map(Deck.displayName);\n            let cut2Display = cut2.map(Deck.displayName);\n\n            cardDisplay.innerHTML = `<strong>Cut 1</strong><br>${cut1Display}<br><br>\n                <strong>Cut 2<br></strong>${cut2Display}`;\n        \n        },\n\n        //remove the first four cards from the deck, display them, add the score value, and return the deck array\n        dealBJ: function(arr) {\n            //loop throught the array to get the first four values and display\n            for( var i = 0 ; i < 4 ; i++ ) {\n                \n                var nextCard = arr.shift();\n                var nextCardName = Deck.displayName(nextCard);\n                \n                if( i == 0 ) {\n                    dealersFirst.innerHTML = `${nextCardName}`;\n                    dealerScore = nextCard.score;\n                }\n                else if( i == 1 ) {\n                    playersFirst.innerHTML = `${nextCardName}`;\n                    playerScore = nextCard.score;\n                }\n                else if( i == 2 ) {\n                    dealersSecond.innerHTML = `${nextCardName}`;\n                    dealerScore += nextCard.score;\n                }\n                else if( i == 3 ) {\n                    playersSecond.innerHTML = `${nextCardName}`;\n                    playerScore += nextCard.score;\n                }\n                \n            }\n\n            //set the scores to the bothScores object\n            bothScores.dealerScore = dealerScore;\n            bothScores.playerScore = playerScore;\n\n            //check for BJ\n            if(playerScore == 21 && dealerScore != 21) {\n                message.innerHTML = '<strong>BLACKJACK<br />YOU are a WINNER!!!</strong>';\n            } else if (playerScore == 21 && dealerScore == 21) {\n                message.innerHTML = '<strong>PUSH</strong>';\n            }\n            return arr;\n        },\n\n        // remove the next card from the deck, display it on the player side, add to the players score and return the deck array\n        hitBJ: function(arr) {\n            var nextCard = arr.shift();\n            var nextCardName = Deck.displayName(nextCard);\n            playersHit.innerHTML += nextCardName;\n            //add new card score to player score\n            bothScores.playerScore += nextCard.score;\n            if (bothScores.playerScore > 21) {\n                message.innerHTML = '<strong>YOU BUSTED<br />YOU STINK!</strong>';\n            }\n            return arr;\n        },\n\n        //checks the dealers score.  if less than 17 and less than the players score, hit again.  then run the score check funtion\n        stayBJ: function(arr) {\n            if (bothScores.dealerScore < bothScores.playerScore && bothScores.dealerScore < 17) {\n                var nextCard = arr.shift();\n                var nextCardName = Deck.displayName(nextCard);\n                dealersHit.innerHTML += nextCardName;\n                //add new card score to player score\n                bothScores.dealerScore += nextCard.score;\n                Deck.scoreCheck();\n            } else {\n                Deck.scoreCheck();\n            }\n            },\n\n        //logic to decide if the dealer should hit again or stay.  If hitting again, run the stayBJ function.  If staying, compare dealer vs player score and display a message.\n        scoreCheck: function() {\n            if (bothScores.dealerScore < bothScores.playerScore && bothScores.dealerScore < 17) {\n                Deck.stayBJ(deckArr);\n            } else if (bothScores.dealerScore >= 17  && bothScores.dealerScore > bothScores.playerScore && bothScores.dealerScore <= 21 ) {\n                message.innerHTML = 'Dealer WINS';\n            } else if (bothScores.dealerScore > 21) {\n                message.innerHTML = 'Dealer Busts<br />You WIN!!!';\n            } else if (bothScores.dealerScore == bothScores.playerScore){\n                message.innerHTML = 'This round is a PUSH';\n            } else if (bothScores.dealerScore < bothScores.playerScore){\n                message.innerHTML = 'You WIN!!!';\n            }\n        },\n\n        //clears all the cards and messages off the table\n        clearTable : function() {\n            dealersFirst.innerHTML = '';\n            dealersSecond.innerHTML = '';\n            playersFirst.innerHTML = '';\n            playersSecond.innerHTML = '';\n            dealersHit.innerHTML = '';\n            playersHit.innerHTML = '';\n            message.innerHTML = '';\n        }\n\n    }\n\n    if (dealBtn) {\n        dealBtn.addEventListener('click', function(event) {\n            event.preventDefault();\n            Deck.clearTable();\n            Deck.build();\n            Deck.shuffle(deckArr);\n            Deck.dealBJ(deckArr);\n            //give ability to build a new deck that is not shuffled\n            isDeckBuilt = false;\n        });\n    }\n\n    if (hitBtn) {\n        hitBtn.addEventListener('click', function(event) {\n            event.preventDefault();\n            Deck.hitBJ(deckArr);\n            //give ability to build a new deck that is not shuffled\n            isDeckBuilt = false;\n        });\n    }\n\n    if (stayBtn) {\n        stayBtn.addEventListener('click', function(event) {\n            event.preventDefault();\n            Deck.stayBJ(deckArr);\n            //give ability to build a new deck that is not shuffled\n            isDeckBuilt = false;\n        });\n    }\n\n\n});"]}